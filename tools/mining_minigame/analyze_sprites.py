import tomllib
import os

xcoord_table = [
    0,2,4,6,
    0,2,4,6,
    0,2,4,6,
    0,2,4,6
]

ycoord_table = [
    0,0,0,0,
    2,2,2,2,
    4,4,4,4,
    6,6,6,6
]

def read_4bpp_file(file_path):
    data_32bit_chunks = []

    try:
        with open(file_path, 'rb') as file:
            # Read the entire file content
            byte_data = file.read()

            # Iterate over the data in 4-byte (32-bit) chunks
            for i in range(0, len(byte_data), 4):
                # Combine up to 4 bytes into a 32-bit integer
                chunk = byte_data[i:i+4]
                # Convert bytes to an integer (big-endian)
                chunk_value = int.from_bytes(chunk, byteorder='big')
                data_32bit_chunks.append(chunk_value)

    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

    return data_32bit_chunks

def IsTileTransparent(tile, data):
    first_tile_starting_idx = (xcoord_table[tile] + ycoord_table[tile] * 8) * 8
    second_tile_starting_idx = (xcoord_table[tile] + (ycoord_table[tile]+1) * 8) * 8

    for row in range(first_tile_starting_idx, first_tile_starting_idx+16):    
        if data[row] > 0:
            return 1

    for row in range(second_tile_starting_idx, second_tile_starting_idx+16):    
        if data[row] > 0:
            return 1

    return 0

def turn_analysed_data_into_string(data, enum):
    result = "      "

    for i in data:
        result = result + str(i) + ","

    result = "    [" + enum + "] = " + "{\n" + result + "\n" + "    },\n"
    return result

if __name__ == "__main__":
    toml_path = "./graphics/mining_minigame/sprite_enum_table.toml"
    gfx_items = "./graphics/mining_minigame/items/"
    gfx_stones = "./graphics/mining_minigame/stones/"
    analysed_sprite_data = []
    contents = """// DO NOT MODIFY THIS FILE'S CONTENT! THE CONTENT OF THIS FILE IS AUTOGENERATED! ONLY MODIFY THIS FILE IF YOU KNOW WHAT YOU ARE DOING!
#include "constants/mining_minigame.h"

static const int SpriteTileTable[][16] = {
"""


    with open(toml_path, "rb") as f:
        toml_data = tomllib.load(f)

    # Items
    for filename in os.listdir(gfx_items):
        if os.path.isfile(os.path.join(gfx_items, filename)) and filename.endswith('.4bpp'):
            key = gfx_items + filename
            enum = toml_data['items'][key]
            data = read_4bpp_file(key)
            if data:
                for tile in range(0, 16):
                    analysed_sprite_data.append(IsTileTransparent(tile, data))
                contents = contents + turn_analysed_data_into_string(analysed_sprite_data, enum)
                analysed_sprite_data = []

    # Stones
    for filename in os.listdir(gfx_stones):
        if os.path.isfile(os.path.join(gfx_stones, filename)) and filename.endswith('.4bpp'):
            key = gfx_stones + filename
            enum = toml_data['stones'][key]
            data = read_4bpp_file(key)
            if data:
                for tile in range(0, 16):
                    analysed_sprite_data.append(IsTileTransparent(tile, data))
                contents = contents + turn_analysed_data_into_string(analysed_sprite_data, enum)
                analysed_sprite_data = []

    contents = contents + "};"
    
    with open('./src/data/mining_minigame.h', 'w') as file:
        file.write(contents)
